/* NOTIZEN */


Grundlagen: 
-----------

transtion-timing-function: cubic-bezier() für genaue Kontrolle der Animation
animation-name: vergibt Namen für keyframes
animation-iteration-count: wie oft die Animation wiedergegeben wird
animation-fill-mode: both; --> springt direkt in Keyframes

animation: name, duration, timing-function, delay, iteration-count, direction, fill-mode, play-state 
transform, opacity gut für Animationen geeignet, im Gegensatz zu bspw. margin , font oder color

background: image, position/size, repeat, origin, clip, attachment, color
farbe MUSS unterste Ebene sein, sonst ungültiger code

background-color < background-image


Fortgeschritten:
----------------

- Im Idealfall nutzen Animationen CSS-Befehle aus dem Compositing-Berreich


- Sollten mehrere CSS-Regeln im Widerspruch zueinander stehen, wird die anzuwendende REgel wie folgt ermittlelt:
1. Wichtigkeit (!important, ...)
2. Spezifität
3. Platzierung (im Quellcode, je weiter unten, umso bevorzugter)

best practice vermeidet !important und Inline-Styles. gearbeitet wird mit der Spezifität

Spezifität: Inline-Style > Anzahl der IDs > Anzahl der Klassen, Pseudoklassen und Attribute > Elemente, Pseudoelemente


- www.w3.org für Docs

- .html font-size auf 62.5% setzen, um 10px zu erhalten und mit em besser arbeiten zu können.
- rem als best practice empfohlen, in ausnahmefällen vh oder %

- padding ist klickbar, margin nicht!
- width und height wirkt sich NUR auf den content aus, NICHT auf padding, border und margin!
LÖSUNG: box-sizing: border-box

- Mit float lassen sich elemente nebeneinander anzeigen.

- In CHROME RK-->Untersuchen und dann auf das Smartphone-Icon klicken, um die Bildschirmgröße eines Smartphones zu simulieren


- für @media float auf none bzw. initial setzen, um elemente bei kleinerem bildschirm untereinander anzuzeigen

- Position:
position: relative positioniert relativ zu seiner Position gebracht
fixed: relativ zum viewport, selbst, wenn gescrollt wird, sollte vermieden werden
sticky: wechselt zwischen relative und fixed, je nachdem, wie der user gescrollt hat
absolute: element wird aus dem textfluss herausgehoben und relativ zum nächsten eltern-element mit positionierung positioniert, ansonten
absolut zur Seite, kann mit top, left, right, bottom kombiniert werden.

- z-Index:
bei position relative oder absolute anwendbar. je höher der wert, desto weiter im vordergrund
reihenfolge im Code entscheidet bei gleichem z-index. Standardwert: 0

- webp als bildformat für transparenz, photoshop benötigt ein plugin

- calc() zum kombinieren mehrerer Größeneinheiten (rem, vw, %, etc.)

- Externe Schriftarten in CSS:
Zunächst: Google Fonts, aber Datenschutzrechtlich problematisch
font-weight: lighter, normal, bold, etc. können nicht animiert werden, außer, man bindet sie selbst ein.
Formate: SVG, EOT (beide veraltet), OTF/TTF hat große Dateien, WOFF (Web Open Font Format) bzw. WOFF2
auf caniuse.com die Fonts überprüfen

Einbindung früher: für jede Schriftdicke wird eine neue Schrift geladen
Inzwischen gibt es Variable Fonts, bei denen die Schriftdicke berechnet werden kann, wodurch Schriftdicke angepasst werden kann.
Glyphs: Die in einer Schriftart enthaltenen Zeichen, andere als lateinische Zeichen werden von Google Web Fonts nachgeladen
Auf Google Fonts --> Download Family, enthält Schriftart einmal normal und einmal als italic mit allen Zeichen
Bsp: Jost, 550kB
Schriftart erstellen Bsp.:
@font-face{
    font-family: Jost;
    font-style: italic;
    font-weight: 400;
    font-display: swap;     
    src: URL Format
    unicode-range: welcher Zeichenbereich genommen wird
}

Schriftarten komprimmieren: 
NICHT mit Online-Converter! unterstützt Variable Width nicht
google --> woff2 github (GEHT LEIDER NUR AUF macOS und LINUX)





